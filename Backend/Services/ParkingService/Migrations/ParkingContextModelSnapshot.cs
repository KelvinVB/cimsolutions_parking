// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingService.Context;

namespace ParkingService.Migrations
{
    [DbContext(typeof(ParkingContext))]
    partial class ParkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParkingService.Models.ParkingGarage", b =>
                {
                    b.Property<int>("parkingGarageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("freeParkingSpots")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("totalParkingSpots")
                        .HasColumnType("int");

                    b.HasKey("parkingGarageID");

                    b.ToTable("ParkingGarages");

                    b.HasData(
                        new
                        {
                            parkingGarageID = 1,
                            address = "De Waal 21b",
                            city = "Best",
                            freeParkingSpots = 0,
                            name = "CimParking",
                            postcode = "5684 PH",
                            totalParkingSpots = 150
                        });
                });

            modelBuilder.Entity("ParkingService.Models.ParkingSpot", b =>
                {
                    b.Property<int>("parkingSpotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("parkStatus")
                        .HasColumnType("int");

                    b.Property<int>("parkingGarageID")
                        .HasColumnType("int");

                    b.HasKey("parkingSpotID");

                    b.HasIndex("parkingGarageID");

                    b.ToTable("parkingSpots");

                    b.HasData(
                        new
                        {
                            parkingSpotID = 1,
                            name = "A1",
                            parkStatus = 0,
                            parkingGarageID = 1
                        },
                        new
                        {
                            parkingSpotID = 2,
                            name = "A2",
                            parkStatus = 0,
                            parkingGarageID = 1
                        },
                        new
                        {
                            parkingSpotID = 3,
                            name = "A3",
                            parkStatus = 0,
                            parkingGarageID = 1
                        });
                });

            modelBuilder.Entity("ParkingService.Models.ReservationTimeSlot", b =>
                {
                    b.Property<int>("reservationTimeSlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("accountID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endReservation")
                        .HasColumnType("datetime2");

                    b.Property<string>("licensePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("parkingSpotID")
                        .HasColumnType("int");

                    b.Property<DateTime>("startReservation")
                        .HasColumnType("datetime2");

                    b.HasKey("reservationTimeSlotID");

                    b.HasIndex("parkingSpotID");

                    b.ToTable("reservationTimeSlots");

                    b.HasData(
                        new
                        {
                            reservationTimeSlotID = 1,
                            endReservation = new DateTime(2021, 3, 26, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            licensePlateNumber = "A-111-AA",
                            parkingSpotID = 1,
                            startReservation = new DateTime(2021, 3, 26, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            reservationTimeSlotID = 2,
                            endReservation = new DateTime(2021, 3, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            licensePlateNumber = "A-111-AA",
                            parkingSpotID = 1,
                            startReservation = new DateTime(2021, 3, 27, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            reservationTimeSlotID = 3,
                            endReservation = new DateTime(2021, 3, 26, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            licensePlateNumber = "A-111-AA",
                            parkingSpotID = 2,
                            startReservation = new DateTime(2021, 3, 26, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ParkingService.Models.ParkingSpot", b =>
                {
                    b.HasOne("ParkingService.Models.ParkingGarage", "parkingGarage")
                        .WithMany("parkingSpots")
                        .HasForeignKey("parkingGarageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parkingGarage");
                });

            modelBuilder.Entity("ParkingService.Models.ReservationTimeSlot", b =>
                {
                    b.HasOne("ParkingService.Models.ParkingSpot", "parkingSpot")
                        .WithMany("reservationTimeSlots")
                        .HasForeignKey("parkingSpotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parkingSpot");
                });

            modelBuilder.Entity("ParkingService.Models.ParkingGarage", b =>
                {
                    b.Navigation("parkingSpots");
                });

            modelBuilder.Entity("ParkingService.Models.ParkingSpot", b =>
                {
                    b.Navigation("reservationTimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
